// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CardProgressStatus {
  new
  learning
  known
}

model User {
  id             String          @id
  email          String          @unique
  name           String?
  createdAt      DateTime        @default(now())
  courses        Course[]
  cardProgresses CardProgress[]
  enrollments    Enrollment[]
  reviewSessions ReviewSession[]
}

model Course {
  id         String       @id @default(uuid()) @db.Uuid
  title      String
  ownerId    String       // Clerk user ID
  createdAt  DateTime     @default(now())
  chapters   Chapter[]
  owner      User         @relation(fields: [ownerId], references: [id])
  Enrollment Enrollment[]
}

model Chapter {
  id         String   @id @default(uuid()) @db.Uuid
  courseId   String   @db.Uuid
  title      String
  orderIndex Int
  isOptional Boolean  @default(false)
  course     Course   @relation(fields: [courseId], references: [id])
  lessons    Lesson[]
}

model Lesson {
  id         String  @id @default(uuid()) @db.Uuid
  chapterId  String  @db.Uuid
  title      String
  orderIndex Int
  isOptional Boolean @default(false)
  cards      Card[]
  chapter    Chapter @relation(fields: [chapterId], references: [id])
}

model Card {
  id                String              @id @default(uuid()) @db.Uuid
  lessonId          String              @db.Uuid
  term              String
  translation       String
  wordType          String
  hintForms         String?
  hintExample       String?
  lesson            Lesson              @relation(fields: [lessonId], references: [id])
  hints             CardHint[]
  CardProgress      CardProgress[]
  ReviewSessionCard ReviewSessionCard[]
}

model CardHint {
  id     String @id @default(uuid()) @db.Uuid
  cardId String @db.Uuid
  card   Card   @relation(fields: [cardId], references: [id])
}

model CardProgress {
  id             String             @id @default(uuid()) @db.Uuid
  userId         String             // Clerk user ID
  cardId         String             @db.Uuid
  status         CardProgressStatus
  timesSeen      Int                @default(0)
  lastReviewedAt DateTime?

  user User @relation(fields: [userId], references: [id])
  card Card @relation(fields: [cardId], references: [id])
}

model Enrollment {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   // Clerk user ID
  courseId    String   @db.Uuid
  entrolledAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  course      Course   @relation(fields: [courseId], references: [id])
}

model ReviewSession {
  id        String              @id @default(uuid()) @db.Uuid
  student   User                @relation(fields: [studentId], references: [id])
  studentId String              // Clerk user ID
  createdAt DateTime            @default(now())
  cards     ReviewSessionCard[]
}

model ReviewSessionCard {
  id        String        @id @default(uuid()) @db.Uuid
  sessionId String        @db.Uuid
  cardId    String        @db.Uuid
  correct   Boolean
  seenAt    DateTime
  session   ReviewSession @relation(fields: [sessionId], references: [id])
  card      Card          @relation(fields: [cardId], references: [id])
}
